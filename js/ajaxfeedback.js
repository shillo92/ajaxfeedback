/**
 * Extracts the messages from a JSON result.
 *
 * @param data
 * @returns {*}
 * @constructor
 */
var ExtractMessages = function (data) {
    return (data['messages']) ? data['messages'] : null;
};
$.fn.extend({
    /**
     * Makes a jQuery element a messenger for JSON messages sent over AJAX.
     *
     * @param options You must specify a 'returnedData' option since it provides the data returned from the JSON response.
     * @constructor
     * @throws If no 'returnedData' option specified.
     */
    ajaxFeedback : function (options) {
        var settings = $.extend({
            /**
             * The data returned from the JSON response to the AJAX request.
             */
            returnedData : null,

            /**
             * Specify the number of seconds after which every message will be hidden. You can specify 0 (or any other
             * false value) if you do not want to hide it. Defaults to 5 seconds.
             */
            hideAfter : 5,

            /**
             * Maybe sounds a little scary but it's simply a method to create the HTML for the element that will contain
             * all the input messages.
             *
             * @param classname string. CSS classname generated by the plugin.
             * @returns {string} HTML string represents the input messages container.
             */
            formatMessagesContainer : function (classname) {
                return '<ul class="'+classname+'"></ul>';
            },

            /**
             * Called each message iteration to create an HTML message.
             *
             * @param inputClassname string. CSS Classname generated by the plugin.
             * @param inputMessage string. The text message returned from the JSON response.
             * @returns {string} HTML string represents the message.
             */
            formatMessage : function (inputClassname, inputMessage) {
                return '<li class="'+inputClassname+'">'+inputMessage+'</li>';
            },

            /**
             * Responsible for showing the message, by default shows it with a 'fadeIn' animation.
             *
             * This method is called in the context of the jQuery message element, therefore no parameters are passed.
             * Simply assume that 'this' is the jQuery message element.
             */
            messageShow : function () {
                this.fadeIn();
            },

            /**
             * Responsible for hiding the message (usually after a delay of couple seconds),
             * by default hides it with a 'fadeOut'.
             *
             * This method is called in the context of the jQuery message element, therefore no parameters are passed.
             * Simply assume that 'this' is the jQuery message element.
             */
            messageHide : function () {
                this.fadeOut();
            }
        }, options);

        if (!settings.returnedData) {
            throw "You must specify a returnedData option in AjaxFeedback";
        }

        var messages = ExtractMessages(settings.returnedData);
        var $this    = $(this);

        if (messages) {
            // Clear previous messages (if exist)
            $this.empty();

            $.each(messages, function (messagesType, inputMessages) {
                // Using this classname it will be easier to style messages according to their type e.g: error,
                // success, info
                var classname = 'msg-'+messagesType+"-container";
                var messagesContainerHtml = settings.formatMessagesContainer(classname);
                var $messagesContainer = $(messagesContainerHtml).appendTo($this);

                // inputMessages is array of messages attached to input element such as <input type="text" />
                $.each(inputMessages, function (inputName, inputMessage) {
                    var inputClassname  = "msg-"+messagesType+" msg-input-"+inputName;
                    var msgHtml         = settings.formatMessage(inputClassname, inputMessage);
                    var show            = settings.messageShow;
                    var hide            = settings.messageHide;
                    var $msg            = $(msgHtml).hide().appendTo($messagesContainer);
                    var hideAfter       = settings.hideAfter * 1000; // Convert to milliseconds

                    // Show the element
                    show.call($msg);

                    // Hide the element after certain time or non at all
                    if (settings.hideAfter) {
                        setTimeout(function () {hide.call($msg);}, hideAfter)
                    }
                });
            });
        }
    }
});